alias copy="rsync --archive --update --progress --human-readable --recursive"
alias move="rsync --archive --update --progress --human-readable --recursive --remove-source-files"

# Make directory, and cd into it
alias mkcd=alias mkcd="function _mkcd() { local dir="$*"; mkdir -p "$dir" && cd "$dir";}; _mkcd"

# Copy with rsync and move into destination
alias mkcopy=alias mkmove="function _mkmove() { rsync --archive --update --progress --human-readable --recursive "$1" "$2" && cd "$2"; }; _mkmove"

# Move with rsync and move into destination
alias mkmove="function _mkmove() { rsync --archive --update --progress --human-readable --recursive --remove-source-files "$1" "$2" && cd "$2"; }; _mkcopy"

# Move out of directories
alias home="cd ~"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../.."

# Install, updates & upgrade
alias update="sudo apt update"
alias upgrade="sudo apt upgrade -y"
alias upup="sudo update && sudo apt upgrade -y"

# Docker
alias dstop='sudo docker stop' # usage: dstop container_name
alias drm='sudo docker rm' # usage: drm container_name
alias dps='sudo docker ps -a' # running docker processes
alias dpss='sudo docker ps -a --format "table {{.Names}}\t{{.State}}\t{{.Status}}\t{{.Image}}" | (sed -u 1q; sort)' # running docker processes as nicer table
alias dprunevol='sudo docker volume prune' # remove unused volumes
alias dprunesys='sudo docker system prune -a' # remove unsed docker data
alias ddelimages='sudo docker rmi $(sudo docker images -q)' # remove unused docker images
alias dprune='ddelimages ; dprunevol ; dprunesys' # remove unused data, volumes, and images (perfect for safe clean up)

# Docker Compose
#alias dcup="sudo docker compose up -d --build -f"
alias dcup='function _dcup() { sudo docker compose -f "$1" up -d --build; }; _dcup'
alias dcdown="sudo docker compose down -f"
alias dcstop="sudo docker compose stop -f"
alias dcrestart="sudo docker compose restart -f"
alias dcstart="sudo docker compose start -f"
alias dcpull="sudo docker compose pull -f"
alias dclogs="sudo docker compose logs -tf --tail='100' -f"

# Function to check if eza is installed
check_eza() {
  if command -v eza &> /dev/null; then
    alias ls="eza"
    alias la="eza -la" # ls
    alias ll="eza -lbF --git" # list, size, type, git
    alias llm="eza -lbGd --git --sort=modified" # long list, modified date sort
    alias la="eza -lbhHigUmuSa --time-style=long-iso --git --color-scale" # all list
    alias lx="eza -lbhHigUmuSa@ --time-style=long-iso --git --color-scale" # all + extended list
    alias lS="eza -1" # one column, just names
    alias lt="eza --tree --level=2" # tree
  else
    alias lsa="ls -la" # fallback to ls
    alias ll="ls -lbF" # fallback to ls
    alias llm="ls -lbGd --sort=modified" # fallback to ls
    alias la="ls -lbhHigUmuSa --time-style=long-iso" # fallback to ls
    alias lx="ls -lbhHigUmuSa@" # fallback to ls
    alias lS="ls -1" # fallback to ls
    alias lt="ls --tree --level=2" # fallback to ls
  fi
}

# Call the function
check_eza

# clear write issues
alias claer="clear"
alias clera="clear"
alias clare="clear"
alias clr="clear"
alias ckear="clear"
alias c="clear"

# reboot & shutdown
alias reboot="sudo reboot"
alias shutdown="sudo shutdown -h 0"

# Automatically start tmux in ssh sessions
if [[ $- =~ i ]] && [[ -z "$TMUX" ]] && [[ -n "$SSH_TTY" ]]; then
  tmux attach-session -t ssh_tmux || tmux new-session -s "$(hostname)"
fi
